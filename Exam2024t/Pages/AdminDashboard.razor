@page "/AdminDashboard"
@using Core.Models
@using Exam2024t.Services
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IAdminService AdminService
@inject ISignatureService SignatureService


<PageTitle>Admin Dashboard</PageTitle>

<h2>Admin Dashboard</h2>

<h3>You are logged in as:</h3>
@if (currentAdmin != null)
{
    <div>
        <p>Username: @currentAdmin.Username</p>
        <p>Name: @currentAdmin.Name</p>
        <p>Email: @currentAdmin.Email</p>
    </div>
    <button class="btn btn-primary" @onclick="Logout">Logout</button>
}
else
{
    <p>Loading admin data...</p>
}

<div>
    <button class="btn btn-primary" @onclick="ShowApplicationsApproved">Applications approved</button><!--see all approved applications-->
    @if (showApprovedApplications)
    {
        <h1>Godkendte</h1>
        <table class="table">
            <tbody>
                @foreach (var application in approvedApplications)
                {
                    <tr>
                        <td>
                            <p class="infotext"><strong>Volunteer Name:</strong> @application.Child.Volunteer.Name</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Email:</strong> @application.Child.Volunteer.Email</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>First Priority Week:</strong> @application.FirstpriorityWeek</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>First Priority Period:</strong> @application.FirstpriorityPeriod</p>
                        </td>
                        <td>
                            <button @onclick="() => ShowApprovedApplicationDetails(application)">Se detaljer</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div>
    <button class="btn btn-primary" @onclick="ShowQueuedApplications">Show All Applications</button>

    @if (showQueuedApplications)
    {
        <h1>Venteliste</h1>
        <div class="mb-3">
            <input type="text" placeholder="Enter name" @bind="Emailfilter" />
            <label for="FirstPriorityWeek">Prioritetsuge</label>
            <InputSelect id="FirstPriorityWeek" @bind-Value="selectedWeek" @oninput="OnInputUge1">
                @foreach (var anOption in optionsUge1)
                {
                    <option value="@anOption">@anOption</option>
                }
            </InputSelect>
            <label for="FirstPriorityPeriod">Prioritetperiode</label>
            <InputSelect id="FirstPriorityPeriod" @bind-Value="selectedPeriod" @oninput="OnInputPeriode1">
                @foreach (var anOption in optionsPeriode1)
                {
                    <option value="@anOption">@anOption</option>
                }
            </InputSelect>
            <button @onclick="FilterAndSort">Filter & Sort</button>
        </div>

        <table class="table">
            <tbody>
                @foreach (var application in filteredAndSortedApplications ?? new Core.Models.Application[0])
                {
                    <tr>
                        <td>
                            <p class="infotext"><strong>Volunteer Name:</strong> @application.Child.Volunteer.Name</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Email:</strong> @application.Child.Volunteer.Email</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>First Priority Week:</strong> @application.FirstpriorityWeek</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>First Priority Period:</strong> @application.FirstpriorityPeriod</p>
                        </td>
                        <td>
                            <button @onclick="() => ShowQueuedApplicationDetails(application)">Se detaljer</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<ModalDialog @ref="DetailsDialog" Title="Application Details">
    @if (selectedApplication != null)
    {
        <div>
            <h5>Application details</h5>
            <p><strong>Kræwnr:</strong> @selectedApplication.Child.Volunteer.Kræwnr</p>
            <p><strong>Volunteer Name:</strong> @selectedApplication.Child.Volunteer.Name</p>
            <p><strong>Email:</strong> @selectedApplication.Child.Volunteer.Email</p>
            <p><strong>Child Name:</strong> @selectedApplication.Child.ChildName</p>
            <p><strong>Age:</strong> @selectedApplication.Child.ChildAge</p>
            <p><strong>Tøj størrelse:</strong> @selectedApplication.Child.ClothingSize</p>
            <p><strong>Comment:</strong> @selectedApplication.Child.Comment</p>
            <p><strong>Been Before:</strong> @selectedApplication.Child.Beenbefore</p>
            <p><strong>Interest:</strong> @selectedApplication.Child.Interest</p>
            <p><strong>Volunteer:</strong> @selectedApplication.IsVolunteer</p>
            <p><strong>First Priority Week:</strong> @selectedApplication.FirstpriorityWeek</p>
            <p><strong>First Priority Period:</strong> @selectedApplication.FirstpriorityPeriod</p>
            <p><strong>Second Priority Week:</strong> @selectedApplication.SecondpriorityWeek</p>
            <p><strong>Second Priority Period:</strong> @selectedApplication.SecondpriorityPeriod</p>
        </div>
        @if (!selectedApplication.IsApproved)
        {
            <button @onclick="() => ShowEditModal(selectedApplication)" class="btn btn-primary">Edit</button>
        }
    }
</ModalDialog>

<ModalDialog @ref="EditDialog" Title="Edit Application">
    @if (selectedApplication != null)
    {
        <EditForm Model="@selectedApplication" OnValidSubmit="HandleEditApplication">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row">
                <label for="Kræwnr" class="col-md-4 col-form-label">Kræwnr.</label>
                <div class="col-md-4">
                    <InputNumber id="Kræwnr" @bind-Value="selectedApplication.Child.Volunteer.Kræwnr" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Kræwnr)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="VolunteerNavn" class="col-md-4 col-form-label">Navn</label>
                <div class="col-md-4">
                    <InputText id="VolunteerNavn" @bind-Value="selectedApplication.Child.Volunteer.Name" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Name)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="VolunteerEmail" class="col-md-4 col-form-label">Email</label>
                <div class="col-md-4">
                    <InputText id="VolunteerEmail" @bind-Value="selectedApplication.Child.Volunteer.Email" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Email)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="ChildName" class="col-md-4 col-form-label">Navn Barn</label>
                <div class="col-md-4">
                    <InputText id="ChildName" @bind-Value="selectedApplication.Child.ChildName" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ChildName)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="ChildAge" class="col-md-4 col-form-label">Alder barn</label>
                <div class="col-md-4">
                    <InputNumber id="ChildAge" @bind-Value="selectedApplication.Child.ChildAge" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ChildAge)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="Clothingsize" class="col-md-4 col-form-label">Tøj størrelse</label>
                <div class="col-md-4">
                    <InputText id="Clothingsize" @bind-Value="selectedApplication.Child.ClothingSize" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ClothingSize)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="FirstPriorityWeek" class="col-md-4 col-form-label">Føreste prioritet uge</label>
                <div class="col-md-4">
                    <InputSelect id="FirstPriorityWeek" @bind-Value="selectedApplication.FirstpriorityWeek" class="form-control" @oninput="OnInputUge1">
                        @foreach (var anOption in optionsUge1)
                        {
                            <option value="@anOption">@anOption</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-group row">
                <label for="FirstPriorityPeriod" class="col-md-4 col-form-label">Føreste periode</label>
                <div class="col-md-4">
                    <InputSelect id="FirstPriorityPeriod" @bind-Value="selectedApplication.FirstpriorityPeriod" class="form-control" @oninput="OnInputPeriode1">
                        @foreach (var anOption in optionsPeriode1)
                        {
                            <option value="@anOption">@anOption</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <button type="submit" class="btn btn-success">Save Changes</button>
            <button type="button" @onclick="ApproveApplication" class="btn btn-success">Approve Application</button>
        </EditForm>
    }
</ModalDialog>

@code {
    private Core.Models.Admin admin = new Core.Models.Admin();
    private Core.Models.Admin currentAdmin;


    private Core.Models.Application[] queuedApplications = new Core.Models.Application[0];
    private Core.Models.Application[] approvedApplications = new Core.Models.Application[0];

    private Core.Models.Application? selectedApplication;
    private ModalDialog DetailsDialog;
    private ModalDialog EditDialog;
    private bool showQueuedApplications = false;
    private bool showApprovedApplications = false;

    private Core.Models.Application[] Applicationlistcopy; // Copy of the original post list
    private Core.Models.Application[] filteredAndSortedApplications = new Core.Models.Application[0];
    private string Emailfilter = "";
    private string selectedWeek = "Vælg";
    private string selectedPeriod = "Vælg";

    //options for dropdowns
    string[] optionsUge1 = { "Vælg", "Uge 27", "Uge 28", "Uge 30", "Uge 31" };
    string[] optionsPeriode1 = { "Vælg", "Onsdag-Søndag", "Onsdag-Fredag", "Fredag-Søndag" };
    string selectedOptionUge1 = "Vælg";
    string selectedOptionPeriode1 = "Vælg";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentAdmin();
    }

    private async Task LoadCurrentAdmin()
    {
        currentAdmin = await AdminService.GetCurrentAdmin();
        if (currentAdmin == null)
        {
            NavigationManager.NavigateTo("/Admin", forceLoad: true);
        }
    }

    private async Task Logout()
    {
        await AdminService.LogoutAdmin();
        NavigationManager.NavigateTo("/Admin", forceLoad: true);
    }

    private void ShowQueuedApplicationDetails(Core.Models.Application application)
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    private void ShowApprovedApplicationDetails(Core.Models.Application application)
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    private void ShowEditModal(Core.Models.Application application)
    {
        selectedApplication = application;
        EditDialog.Open();
    }

    void OnInputUge1(ChangeEventArgs e)
    {
        selectedOptionUge1 = e.Value?.ToString() ?? "null";
    }

    void OnInputPeriode1(ChangeEventArgs e)
    {
        selectedOptionPeriode1 = e.Value?.ToString() ?? "null";
    }

    private async Task HandleEditApplication()
    {
        if (selectedApplication != null)
        {
            await applicationService.UpdateApplication(selectedApplication);
            EditDialog.Close();
        }
    }

    private async Task ApproveApplication()
    {
        if (selectedApplication != null)
        {
            selectedApplication.IsApproved = true;
            await applicationService.UpdateApplication(selectedApplication);

            // Refresh the application lists after approval
            queuedApplications = await applicationService.GetQueuedApplications();
            approvedApplications = await applicationService.GetApprovedApplications();

            Applicationlistcopy = queuedApplications.ToArray();
            FilterAndSort();

            EditDialog.Close();
        }
    }

    private void FilterAndSort()
    {
        if (Applicationlistcopy != null)
        {
            // Filter applications by email
            var filteredApplications = Applicationlistcopy
                .Where(application => string.IsNullOrWhiteSpace(Emailfilter) || application.Child.Volunteer.Email.Contains(Emailfilter, StringComparison.OrdinalIgnoreCase));

            // Filter applications by selected week
            if (!string.IsNullOrEmpty(selectedWeek) && selectedWeek != "Vælg")
            {
                filteredApplications = filteredApplications.Where(application => application.FirstpriorityWeek == selectedWeek);
            }
            if (!string.IsNullOrEmpty(selectedPeriod) && selectedPeriod != "Vælg")
            {
                filteredApplications = filteredApplications.Where(application => application.FirstpriorityPeriod == selectedPeriod);
            }

            // Sort filtered applications by volunteer name
            filteredAndSortedApplications = filteredApplications.OrderBy(application => application.Child.Volunteer.Name).ToArray();
        }
    }

    [Inject]
    private IApplicationService applicationService { get; set; }

    private async Task ShowQueuedApplications()
    {
        queuedApplications = await applicationService.GetQueuedApplications();
        Applicationlistcopy = queuedApplications.ToArray();
        showQueuedApplications = true;
        FilterAndSort();
    }

    private async Task ShowApplicationsApproved()
    {
        approvedApplications = await applicationService.GetApprovedApplications();
        showApprovedApplications = true;
    }
}
