@page "/AdminDashboard"
@using Core.Models
@using Exam2024t.Services
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@using System.Text
@inject NavigationManager NavigationManager
@inject IAdminService AdminService
@inject IJSRuntime JSRuntime

<PageTitle>Admin Dashboard</PageTitle>

<h2>Admin Dashboard</h2>

@if (currentAdmin != null)
{
    <h3>Du er logget ind som: @currentAdmin.Username</h3><!--showing info about the admin logged in -->
    <button class="btn btn-primary" @onclick="Logout">Log ud</button>     <!--logout button-->
}
else
{
    <p>Indlæser admin data...</p>
}

<div class="button-container"><!--approved,queued,newletter email buttons-->
    <button class="btn btn-primary" @onclick="ShowApplicationsApproved">Godkendte tilmeldinger</button>
    <button class="btn btn-primary" @onclick="ShowQueuedApplications">Ventelistede tilmeldinger</button>
    <button @onclick="shownewsletterdialog" class="btn btn-primary">vis folk der er tilmedt nyhedsbrevet</button>

</div>
<div>
    @if (showApprovedApplications)
    {
        <h1>Godkendte tilmeldinger</h1>
        <div class="week-grid">
            @foreach (var week in predefinedWeeks)
            {
                var applicationCount = GetApplicationCountForWeek(week);
                <div class="week-column @(GetWeekColumnClass(applicationCount))">
                    <h3>@week (Total: @applicationCount / 60)</h3>
                    @foreach (var period in predefinedPeriods)
                    {
                        var periodCount = GetApplicationCountForWeekAndPeriod(week, period);
                        <h4>Periode: @period (Total: @periodCount)</h4>
                        <div class="scrollable-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Frivillig navn</th>
                                        <th>Email</th>
                                        <th>Underskrift Status</th>
                                        <th>Uge</th>
                                        <th>Periode</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var application in approvedApplications.Where(a => a.FirstpriorityWeek == week && a.FirstpriorityPeriod == period))
                                    {
                                        <tr>
                                            <td>
                                                <p class="infotext">@application.Child.Volunteer.Name</p>
                                            </td>
                                            <td>
                                                <p class="infotext">@application.Child.Volunteer.Email</p>
                                            </td>
                                            <td>
                                                <p class="infotext">@(application.Signature?.Signed == true ? "Underskrevet" : "Ikke underskrevet")</p>
                                            </td>
                                            <td>
                                                <InputSelect @bind-Value="application.FirstpriorityWeek" @onchange="async (e) => await UpdateApplication(application.appId, application)">
                                                    @foreach (var anOption in optionsUge1)
                                                    {
                                                        <option value="@anOption">@anOption</option>
                                                    }
                                                </InputSelect>
                                            </td>
                                            <td>
                                                <InputSelect @bind-Value="application.FirstpriorityPeriod" @onchange="async (e) => await UpdateApplication(application.appId, application)">
                                                    @foreach (var anOption in optionsPeriode1)
                                                    {
                                                        <option value="@anOption">@anOption</option>
                                                    }
                                                </InputSelect>
                                            </td>

                                            <td>
                                                <button @onclick="() => ShowApprovedApplicationDetails(application)">Se detaljer</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    <button @onclick="() => ShowEmailModal(week)" class="btn btn-primary">Get emails</button>

                </div>
            }
        </div>
    }
</div>

<ModalDialog @ref="EmailDialog" Title="Emails List">
    @if (emailApplications != null)
    {
        <div>
            <h5>Emails for @selectedWeek</h5>
            <ul>
                @foreach (var application in emailApplications)
                {
                    <li>@application.Child.Volunteer.Email</li>
                }
            </ul>
            <button @onclick="() => EmailDialog.Close()" class="btn btn-secondary">Close</button>
        </div>
    }
</ModalDialog>


<div>
    @if (showQueuedApplications)
    {
        <h1>Venteliste</h1>
        <div class="mb-3">
            <input type="text" placeholder="Indtast navn" @bind="Emailfilter" />
            <label for="FirstPriorityWeek">Prioritetsuge</label>
            <InputSelect id="FirstPriorityWeek" @bind-Value="selectedWeek" @oninput="OnInputUge1">
                @foreach (var anOption in optionsUge1)
                {
                    <option value="@anOption">@anOption</option>
                }
            </InputSelect>
            <label for="FirstPriorityPeriod">Prioritetsperiode</label>
            <InputSelect id="FirstPriorityPeriod" @bind-Value="selectedPeriod" @oninput="OnInputPeriode1">
                @foreach (var anOption in optionsPeriode1)
                {
                    <option value="@anOption">@anOption</option>
                }
            </InputSelect>
            <label>
                <input type="checkbox" @bind="showOnlyVolunteers" /> Vis kun frivillige
            </label>
            <button @onclick="FilterAndSort">Filtrer & Sorter</button>
        </div>

        <table class="table">
            <!--adding applicatin detail titles and what they need to include-->
            <tbody>
                @foreach (var application in filteredAndSortedApplications ?? new Core.Models.Application[0])//seeing the filtered applications
                {
                    <tr>
                        <td>
                            <p class="infotext"><strong>Frivillig navn:</strong> @application.Child.Volunteer.Name</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Email:</strong> @application.Child.Volunteer.Email</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Første prioritets uge:</strong> @application.FirstpriorityWeek</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Første prioritets periode:</strong> @application.FirstpriorityPeriod</p>
                        </td>
                        <td>
                            <p class="infotext"><strong>Underskrift Status:</strong> @(application.Signature?.Signed == true ? "Underskrevet" : "Ikke underskrevet")</p>
                        </td>
                        <td>
                            <button @onclick="() => ShowQueuedApplicationDetails(application)">Se detaljer</button><!--button to see queued application details-->
                        </td>
                        <td>
                            <button @onclick="() => DeleteApplicationconfirm(application.appId)" class="btn btn-danger">🗑️</button><!--button to delete queued application-->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

<ModalDialog @ref="DetailsDialog" Title="Application Details">
    <!--modal to show all application details-->
    @if (selectedApplication != null)
    {
        <div>
            <h5>Ansøgningsdetaljer</h5>
            <p><strong>Kræwnr:</strong> @selectedApplication.Child.Volunteer.Kræwnr</p>
            <p><strong>Frivillig navn:</strong> @selectedApplication.Child.Volunteer.Name</p>
            <p><strong>Email:</strong> @selectedApplication.Child.Volunteer.Email</p>
            <p><strong>Barn navn:</strong> @selectedApplication.Child.ChildName</p>
            <p><strong>Barn alder:</strong> @selectedApplication.Child.ChildAge</p>
            <p><strong>Tøj størrelse:</strong> @selectedApplication.Child.ClothingSize</p>
            <p><strong>Kommentar:</strong> @selectedApplication.Child.Comment</p>
            <p><strong>Været her før?:</strong> @selectedApplication.Child.Beenbefore</p>
            <p><strong>Interesse:</strong> @selectedApplication.Child.Interest</p>
            <p><strong>Frivillig?:</strong> @selectedApplication.IsVolunteer</p>
            <p><strong>Første prioritets uge:</strong> @selectedApplication.FirstpriorityWeek</p>
            <p><strong>Første prioritets periode:</strong> @selectedApplication.FirstpriorityPeriod</p>
            @if (selectedApplication.Signature?.Signed == true && selectedApplication.Signature?.Sign != null)
            {
                <img src="@($"{Encoding.UTF8.GetString(selectedApplication.Signature.Sign)}")" alt="Signature" style="max-width: 100%; height: auto;" />
            }
        </div>
        @if (!selectedApplication.IsApproved)
        {
            <p><strong>Anden prioritets uge:</strong> @selectedApplication.SecondpriorityWeek</p>
            <p><strong>Anden prioritets periode:</strong> @selectedApplication.SecondpriorityPeriod</p>

            <!--button to edit selected queued application-->
            <button @onclick="() => ShowEditModal(selectedApplication)" class="btn btn-primary">Rediger</button>

        }

        @if (selectedApplication.IsApproved)
        {
            <!--button to download the selected application as pdf-->
            <button @onclick="() => DownloadPdf(selectedApplication.appId)" class="btn btn-primary">Download PDF</button>

                        <!--button to move the selected application to the queue-->
            <button @onclick="() => MoveToQueued(selectedApplication.appId)" class="btn btn-warning">Flyt til venteliste</button>

        }
    }
</ModalDialog>

<!--modal to edit the actual details in case of errors etc-->
<ModalDialog @ref="EditDialog" Title="Edit Application">
    @if (selectedApplication != null)
    {
        <EditForm Model="@selectedApplication" OnValidSubmit="HandleEditApplication">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row">
                <label for="Kræwnr" class="col-md-4 col-form-label">Kræwnr.</label>
                <div class="col-md-4">
                    <InputNumber id="Kræwnr" @bind-Value="selectedApplication.Child.Volunteer.Kræwnr" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Kræwnr)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="VolunteerNavn" class="col-md-4 col-form-label">Navn</label>
                <div class="col-md-4">
                    <InputText id="VolunteerNavn" @bind-Value="selectedApplication.Child.Volunteer.Name" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Name)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="VolunteerEmail" class="col-md-4 col-form-label">Email</label>
                <div class="col-md-4">
                    <InputText id="VolunteerEmail" @bind-Value="selectedApplication.Child.Volunteer.Email" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.Volunteer.Email)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="ChildName" class="col-md-4 col-form-label">Navn Barn</label>
                <div class="col-md-4">
                    <InputText id="ChildName" @bind-Value="selectedApplication.Child.ChildName" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ChildName)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="ChildAge" class="col-md-4 col-form-label">Alder barn</label>
                <div class="col-md-4">
                    <InputNumber id="ChildAge" @bind-Value="selectedApplication.Child.ChildAge" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ChildAge)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="Clothingsize" class="col-md-4 col-form-label">Tøj størrelse</label>
                <div class="col-md-4">
                    <InputText id="Clothingsize" @bind-Value="selectedApplication.Child.ClothingSize" class="form-control" />
                    <ValidationMessage For="@(() => selectedApplication.Child.ClothingSize)" />
                </div>
            </div>

            <div class="form-group row">
                <label for="FirstPriorityWeek" class="col-md-4 col-form-label">
                    Første prioritets uge<br />
                    Valgt anden prioritets uge: @selectedApplication.SecondpriorityWeek
                </label>
                <div class="col-md-4">
                    <InputSelect id="FirstPriorityWeek" @bind-Value="selectedApplication.FirstpriorityWeek" class="form-control" @oninput="OnInputUge1">
                        @foreach (var anOption in optionsUge1)
                        {
                            <option value="@anOption">@anOption</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-group row">
                <label for="FirstPriorityPeriod" class="col-md-4 col-form-label">
                    Første periode <br />
                    Valgt anden prioritets periode: @selectedApplication.SecondpriorityPeriod
                </label>

                <div class="col-md-4">
                    <InputSelect id="FirstPriorityPeriod" @bind-Value="selectedApplication.FirstpriorityPeriod" class="form-control" @oninput="OnInputPeriode1">
                        @foreach (var anOption in optionsPeriode1)
                        {
                            <option value="@anOption">@anOption</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <button type="submit" class="btn btn-success">Gem ændringer</button><!--button to save changes and leave it-->
            <button type="button" @onclick="ApproveApplication" class="btn btn-success">Godkend tilmelding</button><!--button to approve application and move it into the approved box-->
        </EditForm>
    }
</ModalDialog>


<ModalDialog @ref="newsletterdialog" Title="Emails List">
    @if (emailsnewsletter != null)
    {
        <div>
            <ul>
                @foreach (var email in emailsnewsletter)
                {
                    <li>@email</li>
                }
            </ul>
            <button @onclick="() => newsletterdialog.Close()" class="btn btn-secondary">Luk</button>
        </div>
    }
</ModalDialog>

<ModalDialog @ref="Sletconfirm" Title="Bekræft sletning">
    <p>Er du sikker på at du vil slette?</p>
    <button @onclick="ConfirmDeleteApplication" class="btn btn-secondary">ja</button>
    <button @onclick="() => Sletconfirm.Close()" class="btn btn-secondary">nej</button>
</ModalDialog>

@code {
    //setting up admin
    private Core.Models.Admin admin = new Core.Models.Admin();
    private Core.Models.Admin currentAdmin;

    //setting up application
    private Core.Models.Application[] queuedApplications = new Core.Models.Application[0];
    private Core.Models.Application[] approvedApplications = new Core.Models.Application[0];
    private Core.Models.Application? selectedApplication;

    //setting up the modals
    private ModalDialog DetailsDialog;
    private ModalDialog EditDialog;
    private ModalDialog EmailDialog;

    //slette ting dialog
    private ModalDialog Sletconfirm;

    //newsletteridalog og newsletter
    private List<string> emailsnewsletter;

    private ModalDialog newsletterdialog;

    private bool showQueuedApplications = false;
    private bool showApprovedApplications = false;

    //setting up the filter and sort system
    private Core.Models.Application[] Applicationlistcopy; // Copy of the original post list
    private Core.Models.Application[] filteredAndSortedApplications = new Core.Models.Application[0];
    private string Emailfilter = "";
    private string selectedWeek = "Vælg";
    private string selectedPeriod = "Vælg";

    private Core.Models.Application[] emailApplications;

    // predefined weeks and periods
    private readonly string[] predefinedWeeks = { "Uge 27", "Uge 28", "Uge 30", "Uge 31" };
    private readonly string[] predefinedPeriods = { "Onsdag-Søndag", "Onsdag-Fredag", "Fredag-Søndag" };

    // options for dropdowns in the edit modal
    string[] optionsUge1 = {"Vælg","Uge 27", "Uge 28", "Uge 30", "Uge 31" };
    string[] optionsPeriode1 = {"Vælg","Onsdag-Søndag", "Onsdag-Fredag", "Fredag-Søndag" };
    string selectedOptionUge1 = "Vælg";
    string selectedOptionPeriode1 = "Vælg";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentAdmin();
    }

    private async Task LoadCurrentAdmin()//showing who is currently logged in
    {
        currentAdmin = await AdminService.GetCurrentAdmin();
        if (currentAdmin == null)
        {
            NavigationManager.NavigateTo("/Admin", forceLoad: true);
        }
    }

    private async Task Logout()//logout method
    {
        await AdminService.LogoutAdmin();
        NavigationManager.NavigateTo("/Admin", forceLoad: true);
    }

    private void ShowQueuedApplicationDetails(Core.Models.Application application)//showing queued application details
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    private async Task MoveToQueued(int appId)//method to move the application back to queued in case of errors etc
    {
        try
        {
            //find the application in the approved list
            var application = approvedApplications.FirstOrDefault(a => a.appId == appId);
            if (application != null)
            {
                //update the application status
                application.IsApproved = false;

                //updating the application in the database
                await applicationService.UpdateApplication(appId, application);

                //remove from approved list and add to queued list
                approvedApplications = approvedApplications.Where(a => a.appId != appId).ToArray();
                var queuedApplicationsList = queuedApplications.ToList();
                queuedApplicationsList.Add(application);
                queuedApplications = queuedApplicationsList.ToArray();

                Applicationlistcopy = queuedApplications.ToArray();
                FilterAndSort();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error moving application to queued: {ex.Message}");
        }
    }

    private void ShowApprovedApplicationDetails(Core.Models.Application application)//showing approved application details
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    private void ShowEditModal(Core.Models.Application application)//modal to edit application
    {
        selectedApplication = application;
        EditDialog.Open();
        DetailsDialog.Close();
    }

    private void ShowEmailModal(string week)//modal to show emails within a certain week 
    {
        selectedWeek = week;
        emailApplications = approvedApplications.Where(a => a.FirstpriorityWeek == week).ToArray();
        EmailDialog.Open();
    }

    void OnInputUge1(ChangeEventArgs e)//dropdown in the edit modal
    {
        selectedOptionUge1 = e.Value?.ToString() ?? "null";
    }

    void OnInputPeriode1(ChangeEventArgs e)//dropdown in the edit modal
    {
        selectedOptionPeriode1 = e.Value?.ToString() ?? "null";
    }

    private int ApplicationIdToDelete;

    private void DeleteApplicationconfirm(int appId)//method to delete an application
    {
        ApplicationIdToDelete = appId;
        Sletconfirm.Open();
    }
   
    // Method to handle the actual deletion after confirmation
    private async Task ConfirmDeleteApplication()
    {
        await DeleteApplication(ApplicationIdToDelete);
    }
    
    private async Task DeleteApplication(int appId)//method to delete an application
    {
        await applicationService.DeleteApplication(appId);
        queuedApplications = await applicationService.GetQueuedApplications();
        Applicationlistcopy = queuedApplications.ToArray();
        FilterAndSort();
        Sletconfirm.Close();
    }
    

    private async Task HandleEditApplication()//handling the editing of an application
    {
        if (selectedApplication != null)
        {
            await applicationService.UpdateApplication(selectedApplication.appId, selectedApplication);
            EditDialog.Close();
            DetailsDialog.Open();
        }
    }

    private async Task ApproveApplication()//method to approve the application
    {
        try
        {
            if (selectedApplication != null)
            {
                selectedApplication.IsApproved = true;

                //update the application in the database
                await applicationService.UpdateApplication(selectedApplication.appId, selectedApplication);

                //removing the approved application from queued applications
                queuedApplications = queuedApplications.Where(a => a.appId != selectedApplication.appId).ToArray();

                //append the approved application to the approved applications list
                var approvedApplicationsList = approvedApplications.ToList();
                approvedApplicationsList.Add(selectedApplication);
                approvedApplications = approvedApplicationsList.ToArray();

                //update the local copy of applications for filtering and sorting
                Applicationlistcopy = queuedApplications.ToArray();

                //applying filtering and sorting
                FilterAndSort();

                EditDialog.Close();
            }
        }
        catch (Exception ex)
        {
            //handle any potential exceptions here
            Console.WriteLine($"Error approving application: {ex.Message}");
        }
    }

    private async Task DownloadPdf(int appId)//method to download the pdf
    {
        //constructing the url to download the pdf for the specified application
        var pdfUrl = $"https://localhost:7010/api/application/downloadpdf/{appId}";

        //invoking a js function to download the file using the constructed URL
        await JSRuntime.InvokeVoidAsync("downloadFile", pdfUrl);
    }


    private async Task UpdateApplication(int id, Core.Models.Application application)
    {
        Console.WriteLine("UpdateApplication called");
        Console.WriteLine($"Updating application: {application.appId}, Week: {application.FirstpriorityWeek}, Period: {application.FirstpriorityPeriod}");
        try
        {
            await applicationService.UpdateApplication(id, application);
            approvedApplications = await applicationService.GetApprovedApplications(); // Refresh the approved applications list
        }
        catch (Exception ex)
        {
            // Handle any errors that occur during the update
            Console.WriteLine($"Error updating application: {ex.Message}");
        }
    }


    private bool showOnlyVolunteers = false;
    //filtering and sorting the applications by certain things
    private void FilterAndSort()
    {
        if (Applicationlistcopy != null)
        {
            //filter applications by email
            var filteredApplications = Applicationlistcopy
                .Where(application => string.IsNullOrWhiteSpace(Emailfilter) || application.Child.Volunteer.Email.Contains(Emailfilter, StringComparison.OrdinalIgnoreCase));

            //filter applications by selected week
            if (!string.IsNullOrEmpty(selectedWeek) && selectedWeek != "Vælg")
            {
                filteredApplications = filteredApplications.Where(application => application.FirstpriorityWeek == selectedWeek);
            }
            if (!string.IsNullOrEmpty(selectedPeriod) && selectedPeriod != "Vælg")
            {
                filteredApplications = filteredApplications.Where(application => application.FirstpriorityPeriod == selectedPeriod);
            }

            // Filter applications by volunteer status
            if (showOnlyVolunteers)
            {
                filteredApplications = filteredApplications.Where(application => application.IsVolunteer);
            }

            //sort filtered applications by volunteer name
            filteredAndSortedApplications = filteredApplications.OrderBy(application => application.Child.Volunteer.Name).ToArray();
        }
    }


    public async void shownewsletterdialog()
    {
        await LoadEmails();
        newsletterdialog.Open();
    }

    private async Task LoadEmails()
    {
        emailsnewsletter = await applicationService.GetVolunteerEmails();
    }

    [Inject]
    private IApplicationService applicationService { get; set; }

    private async Task ShowQueuedApplications()//showing the queued applications
    {
        queuedApplications = await applicationService.GetQueuedApplications();
        Applicationlistcopy = queuedApplications.ToArray();
        showQueuedApplications = true;
        FilterAndSort();
    }

    private async Task ShowApplicationsApproved()//showing the approved applications
    {
        approvedApplications = await applicationService.GetApprovedApplications();
        showApprovedApplications = true;
    }

    private int GetApplicationCountForWeek(string week)//counting how many applications are in each week total
    {
        return approvedApplications.Count(a => a.FirstpriorityWeek == week);
    }

    private int GetApplicationCountForWeekAndPeriod(string week, string period)
    {
        return approvedApplications.Count(a => a.FirstpriorityWeek == week && a.FirstpriorityPeriod == period);
    }

    private string GetWeekColumnClass(int applicationCount)//making it so that the colour changes based on how many spots are left in the week
    {
        if (applicationCount < 20)
        {
            return "green";
        }
        else if (applicationCount <= 45)
        {
            return "yellow";
        }
        else
        {
            return "red";
        }
    }


}


