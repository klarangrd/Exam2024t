@page "/Underskrift"
@using System.Text
@using Exam2024t.Services
@inject Blazored.LocalStorage.ILocalStorageService localStore

<PageTitle>Signature</PageTitle>

<h1>Signatur underskrivning</h1>

<h3>Dine applikationer</h3>


    @if (applicationliste != null)
    {
        <table class="table">
            <tbody>
            @foreach (var item in applicationliste)
            {
                <tr>
                    <td>
                        <p class="infotext"><strong>Frivilliges navn:</strong> <br /> @item.Child.Volunteer.Name</p>
                    </td>
                    <td>
                        <p class="infotext"><strong>Email:</strong> <br />@item.Child.Volunteer.Email</p>
                    </td>
                    <td>
                        <p class="infotext"><strong>Førsteprioritets uge:</strong><br /> @item.FirstpriorityWeek</p>
                    </td>
                    <td>
                        <p class="infotext"><strong>Førsteprioritets periode:</strong><br /> @item.FirstpriorityPeriod</p>
                    </td>
                    <td>
                        @if (@item.Signature.Signed == false)
                        {
                            <p class="infotext"><strong>Signatur status:</strong><br /> Ikke underskrevet </p>
                        }
                        else
                        {
                            <p class="infotext"><strong>Signatur status:</strong><br /> Underskrevet </p>
                        }

                    </td>
                    <td>
                        <button @onclick="() => ShowApplicationDetails(item)">Se detaljer</button>
                    </td>
                    <td>
                        @if (@item.Signature.Signed)
                        {
                            <button @onclick="() => ShowSignature(application.Signature.Sign)">Se underskrift</button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
}
<NavLink href="/application"> <button>Tilmeld et barn mere</button> </NavLink>


    <ModalDialog @ref="addDialog" Title="Underskriv applikation">
        <EditForm EditContext="@aEditContext" class="application-form" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <div class="col-md-12">
                    @if (isModalVisible)
                    {
                        <SignaturePad class="signature" @bind-Value="applicationliste[0].Signature.Sign" Options="_options" style="width: 100%; height: 200px"/>
                    }
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary btn-submit" @onclick="appInSignature">Indsend signatur</button>
                </div>
            </div>
        </EditForm>
    </ModalDialog>
    <ModalDialog @ref="DetailsDialog" Title="Applikationsdetaljer">
        @if (selectedApplication != null)
        {
            <div>
                <p><strong>Kræwnr:</strong>  @selectedApplication.Child.Volunteer.Kræwnr</p>
                <p><strong>Frivilliges navn:</strong> @selectedApplication.Child.Volunteer.Name</p>
                <p><strong>Email:</strong> @selectedApplication.Child.Volunteer.Email</p>
                <p><strong>Barnets navn:</strong> @selectedApplication.Child.ChildName</p>
                <p><strong>Alder:</strong> @selectedApplication.Child.ChildAge</p>
                <p><strong>Tøj størrelse:</strong> @selectedApplication.Child.ClothingSize</p>
                <p><strong>Kommentar:</strong> @selectedApplication.Child.Comment</p>
                @if (selectedApplication.Child.Beenbefore)
                {
                    <p><strong>Været her før?:</strong> Ja</p>
                }
                else
                {
                    <p><strong>Været her før?:</strong> Nej</p>
                }
                <p><strong>Interesse:</strong> @selectedApplication.Child.Interest</p>
                @if (selectedApplication.IsVolunteer)
                {
                    <p><strong>Frivillig?:</strong> Ja</p>
                }
                else
                {
                    <p><strong>Frivillig?:</strong> Nej</p>
                }
              
                <p><strong>Førsteprioritets uge:</strong> @selectedApplication.FirstpriorityWeek</p>
                <p><strong>Førsteprioritets periode:</strong> @selectedApplication.FirstpriorityPeriod</p>
                <p><strong>Andenprioritets uge:</strong> @selectedApplication.SecondpriorityWeek</p>
                <p><strong>Andenprioritets periode:</strong> @selectedApplication.SecondpriorityPeriod</p>
            </div>
            @if (!selectedApplication.Signature.Signed) // Show the button only if Signature is not signed
            {
                <button class="btn btn-primary" @onclick="OnClickAddDialog">Underskriv applikation</button>
            }
        }
    </ModalDialog>
    
<ModalDialog @ref="SignatureDialog" Title="Din underskrift">
    @if (signatureImageUrl != null)
    {
    <img src="@signatureImageUrl" alt="Signature" style="width: 100%; height: auto;" />
    }
</ModalDialog>


@code {
    Core.Models.Application application = new Core.Models.Application();
    [Inject]
    private IApplicationService mService { get; set; }
    private bool isModalVisible = false;
    private string? signatureImageUrl;
 
    private Core.Models.Application? selectedApplication;
    private ModalDialog DetailsDialog;
    private ModalDialog SignatureDialog;
    private EditContext aEditContext;
    private ModalDialog? addDialog { get; set; }

     

    protected override void OnInitialized()
    {
        if (application.Signature == null)
        {
            application.Signature = new Core.Models.Signature();
        }
        aEditContext = new EditContext(application);
    }

    private void ShowApplicationDetails(Core.Models.Application application)//showing application details 
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    private async Task ShowSignature(byte[] signatureBytes)
    {
            // Convert the byte array to a base64 string
            string base64String = Convert.ToBase64String(signatureBytes);

            var bytes = Convert.FromBase64String(base64String);
            
            var stringBytes = Encoding.UTF8.GetString(bytes);
            
            // Use the base64 string as an image source with the correct MIME type
            signatureImageUrl = $"{stringBytes}";
            SignatureDialog.Open();
    }


    public void appInSignature()
    {
        if (selectedApplication != null)
        {
            application = new Core.Models.Application
                {
                    Signature = new Core.Models.Signature 
                    { Signed = true,
                        Sign = selectedApplication.Signature.Sign,
                      SignatureDate = DateTime.Now},
                    Child = new Core.Models.Child
                    {
                        ChildName = selectedApplication.Child.ChildName,
                        ChildAge = selectedApplication.Child.ChildAge,
                        ClothingSize = selectedApplication.Child.ClothingSize,
                        Comment = selectedApplication.Child.Comment,
                        Beenbefore = selectedApplication.Child.Beenbefore,
                        Interest = selectedApplication.Child.Interest,
                        Volunteer = new Core.Models.Volunteer
                        {
                            Name = selectedApplication.Child.Volunteer.Name,
                            Email = selectedApplication.Child.Volunteer.Email,
                            Kræwnr = selectedApplication.Child.Volunteer.Kræwnr

                        }
                    },
                    IsVolunteer = selectedApplication.IsVolunteer,
                    FirstpriorityWeek = selectedApplication.FirstpriorityWeek,
                    FirstpriorityPeriod = selectedApplication.FirstpriorityPeriod,
                    SecondpriorityWeek = selectedApplication.SecondpriorityWeek,
                    SecondpriorityPeriod = selectedApplication.SecondpriorityPeriod,

                };

        }
        UpdateApplicationListItem();
    }


    private async Task OnClickAddDialog()
    {
        if (addDialog != null)
        {
            await addDialog.OpenAsync();
            isModalVisible = true;
            StateHasChanged();
            DetailsDialog.Close();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (applicationliste[0].Signature.Sign != null && applicationliste[0].Signature.Sign.Length > 0)
        {
            Console.WriteLine($"Submitting Application with Signature: {Convert.ToBase64String(application.Signature.Sign)}");
        }
        else
        {
            Console.WriteLine("No signature captured.");
        }
    
        await mService.Add(application);
        addDialog?.Close();
        StateHasChanged();
    }


    }

    private SignaturePadOptions _options = new SignaturePadOptions
    {
        LineCap = LineCap.Round,
        LineJoin = LineJoin.Round,
        LineWidth = 5
    };

    Core.Models.Application[] applicationliste;

    protected override async Task OnInitializedAsync()
    {
        applicationliste = await localStore.GetItemAsync<Core.Models.Application[]>("applicationList") ?? new Core.Models.Application[0];
    }

    public void UpdateApplicationListItem()
    {
        if (applicationliste != null && applicationliste.Length > 0)
        {

            var firstItem = applicationliste[0];

            // Update the signed property
            firstItem.Signature.Signed = true; 

            //  save the change in local storage, you need to save the entire array again
            localStore.SetItemAsync("applicationList", applicationliste);
        }
    }


}

