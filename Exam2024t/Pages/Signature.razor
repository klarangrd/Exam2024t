@page "/Signature"
@using Exam2024t.Services
@inject Blazored.LocalStorage.ILocalStorageService localStore

<PageTitle>Signature</PageTitle>

<h1>Signatur underskrivning</h1>

<h3>Dine applikationer</h3>


    @if (applicationliste != null)
    {
        
<div>

    @foreach (var item in applicationliste)
    {
        <tr>
            <td>
                <p class="infotext"><strong>Volunteer Name:</strong> @item.Child.Volunteer.Name</p>
            </td>
            <td>
                <p class="infotext"><strong>Email:</strong> @item.Child.Volunteer.Email</p>
            </td>
            <td>
                <p class="infotext"><strong>First Priority Week:</strong> @item.FirstpriorityWeek</p>
            </td>
            <td>
                <p class="infotext"><strong>First Priority Period:</strong> @item.FirstpriorityPeriod</p>
            </td>
            <td>
                <button @onclick="() => ShowApplicationDetails(item)">Se detaljer</button>
            </td>
        </tr>
    }
</div>
}

    <ModalDialog @ref="addDialog" Title="Underskriv applikation">
        <EditForm EditContext="@aEditContext" class="application-form" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <div class="col-md-12">
                    @if (isModalVisible)
                    {
                        <SignaturePad class="signature" @bind-Value="Core.Models.Signature.Sign" Options="_options" style="width: 100%; height: 200px"/>
                    }
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary btn-submit" @onclick="appInSignature">Indsend signatur</button>
                </div>
            </div>
        </EditForm>
    </ModalDialog>
<ModalDialog @ref="DetailsDialog" Title="application details">
    @if (selectedApplication != null)
    {
        <div>
            <h5>Application details</h5>
            <p><strong>Kræwnr:</strong>  @selectedApplication.Child.Volunteer.Kræwnr</p>
            <p><strong>Volunteer Name:</strong> @selectedApplication.Child.Volunteer.Name</p>
            <p><strong>Email:</strong> @selectedApplication.Child.Volunteer.Email</p>
            <p><strong>Child Name:</strong> @selectedApplication.Child.ChildName</p>
            <p><strong>Age:</strong> @selectedApplication.Child.ChildAge</p>
            <p><strong>Tøj størrelse:</strong> @selectedApplication.Child.ClothingSize</p>
            <p><strong>Comment:</strong> @selectedApplication.Child.Comment</p>
            <p><strong>Been Before:</strong> @selectedApplication.Child.Beenbefore</p>
            <p><strong>Interest:</strong> @selectedApplication.Child.Interest</p>
            <p><strong>Volunteer:</strong> @selectedApplication.IsVolunteer</p>
            <p><strong>First Priority Week:</strong> @selectedApplication.FirstpriorityWeek</p>
            <p><strong>First Priority Period:</strong> @selectedApplication.FirstpriorityPeriod</p>
            <p><strong>Second Priority Week:</strong> @selectedApplication.SecondpriorityWeek</p>
            <p><strong>Second Priority Period:</strong> @selectedApplication.SecondpriorityPeriod</p>
        </div>
        <button class="btn btn-primary" @onclick="OnClickAddDialog">Underskriv applikation</button>
    }
</ModalDialog>



@code {
    private Core.Models.Application[] applications = new Core.Models.Application[0];
    Core.Models.Signature signature = new Core.Models.Signature();
    [Inject]
    private ISignatureService sService { get; set; }
    private bool isModalVisible = false;

    private Core.Models.Application? selectedApplication;
    private ModalDialog DetailsDialog;
    private EditContext aEditContext;
    private ModalDialog? addDialog { get; set; }

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(signature);
    }

    private void ShowApplicationDetails(Core.Models.Application application)//showing application details in the queued ones
    {
        selectedApplication = application;
        DetailsDialog.Open();
    }

    public void appInSignature()
    {
        if (selectedApplication != null)
        {
            signature.Application = new Core.Models.Application
                {
                    Child = new Core.Models.Child
                    {
                        ChildName = selectedApplication.Child.ChildName,
                        ChildAge = selectedApplication.Child.ChildAge,
                        ClothingSize = selectedApplication.Child.ClothingSize,
                        Comment = selectedApplication.Child.Comment,
                        Beenbefore = selectedApplication.Child.Beenbefore,
                        Interest = selectedApplication.Child.Interest,
                        Volunteer = new Core.Models.Volunteer
                        {
                            Name = selectedApplication.Child.Volunteer.Name,
                            Email = selectedApplication.Child.Volunteer.Email,
                            Kræwnr = selectedApplication.Child.Volunteer.Kræwnr

                        }
                    },
                    IsVolunteer = selectedApplication.IsVolunteer,
                    FirstpriorityWeek = selectedApplication.FirstpriorityWeek,
                    FirstpriorityPeriod = selectedApplication.FirstpriorityPeriod,
                    SecondpriorityWeek = selectedApplication.SecondpriorityWeek,
                    SecondpriorityPeriod = selectedApplication.SecondpriorityPeriod,

                };
            signature = new Core.Models.Signature { Signed = true };
        }
    }


    private async Task OnClickAddDialog()
    {
        if (addDialog != null)
        {
            await addDialog.OpenAsync();
            isModalVisible = true;
            StateHasChanged();
            DetailsDialog.Close();
        }
    }

    public async Task HandleValidSubmit()
    {
        await sService.Add(signature);
        addDialog?.Close();
        Console.WriteLine(signature.Signed);
    }

    private SignaturePadOptions _options = new SignaturePadOptions
    {
        LineCap = LineCap.Round,
        LineJoin = LineJoin.Round,
        LineWidth = 5
    };

    Core.Models.Application[] applicationliste;

    protected override async Task OnInitializedAsync()
    {
        applicationliste = await localStore.GetItemAsync<Core.Models.Application[]>("applicationList") ?? new Core.Models.Application[0];
    }

}

